{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\r\n * easy-autocomplete\r\n * jQuery plugin for autocompletion\r\n * \r\n * @author Łukasz Pawełczak (http://github.com/pawelczak)\r\n * @version 1.3.5\r\n * Copyright  License: \r\n */\n\n/*\r\n * EasyAutocomplete - Configuration \r\n */\nvar EasyAutocomplete = function (scope) {\n  scope.Configuration = function Configuration(options) {\n    var defaults = {\n      data: \"list-required\",\n      url: \"list-required\",\n      dataType: \"json\",\n      listLocation: function listLocation(data) {\n        return data;\n      },\n      xmlElementName: \"\",\n      getValue: function getValue(element) {\n        return element;\n      },\n      autocompleteOff: true,\n      placeholder: false,\n      ajaxCallback: function ajaxCallback() {},\n      matchResponseProperty: false,\n      list: {\n        sort: {\n          enabled: false,\n          method: function method(a, b) {\n            a = defaults.getValue(a);\n            b = defaults.getValue(b);\n\n            if (a < b) {\n              return -1;\n            }\n\n            if (a > b) {\n              return 1;\n            }\n\n            return 0;\n          }\n        },\n        maxNumberOfElements: 6,\n        hideOnEmptyPhrase: true,\n        match: {\n          enabled: false,\n          caseSensitive: false,\n          method: function method(element, phrase) {\n            if (element.search(phrase) > -1) {\n              return true;\n            } else {\n              return false;\n            }\n          }\n        },\n        showAnimation: {\n          type: \"normal\",\n          //normal|slide|fade\n          time: 400,\n          callback: function callback() {}\n        },\n        hideAnimation: {\n          type: \"normal\",\n          time: 400,\n          callback: function callback() {}\n        },\n\n        /* Events */\n        onClickEvent: function onClickEvent() {},\n        onSelectItemEvent: function onSelectItemEvent() {},\n        onLoadEvent: function onLoadEvent() {},\n        onChooseEvent: function onChooseEvent() {},\n        onKeyEnterEvent: function onKeyEnterEvent() {},\n        onMouseOverEvent: function onMouseOverEvent() {},\n        onMouseOutEvent: function onMouseOutEvent() {},\n        onShowListEvent: function onShowListEvent() {},\n        onHideListEvent: function onHideListEvent() {}\n      },\n      highlightPhrase: true,\n      theme: \"\",\n      cssClasses: \"\",\n      minCharNumber: 0,\n      requestDelay: 0,\n      adjustWidth: true,\n      ajaxSettings: {},\n      preparePostData: function preparePostData(data, inputPhrase) {\n        return data;\n      },\n      loggerEnabled: true,\n      template: \"\",\n      categoriesAssigned: false,\n      categories: [{\n        maxNumberOfElements: 4\n      }]\n    };\n    var externalObjects = [\"ajaxSettings\", \"template\"];\n\n    this.get = function (propertyName) {\n      return defaults[propertyName];\n    };\n\n    this.equals = function (name, value) {\n      if (isAssigned(name)) {\n        if (defaults[name] === value) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.checkDataUrlProperties = function () {\n      if (defaults.url === \"list-required\" && defaults.data === \"list-required\") {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkRequiredProperties = function () {\n      for (var propertyName in defaults) {\n        if (defaults[propertyName] === \"required\") {\n          logger.error(\"Option \" + propertyName + \" must be defined\");\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.printPropertiesThatDoesntExist = function (consol, optionsToCheck) {\n      printPropertiesThatDoesntExist(consol, optionsToCheck);\n    };\n\n    prepareDefaults();\n    mergeOptions();\n\n    if (defaults.loggerEnabled === true) {\n      printPropertiesThatDoesntExist(console, options);\n    }\n\n    addAjaxSettings();\n    processAfterMerge();\n\n    function prepareDefaults() {\n      if (options.dataType === \"xml\") {\n        if (!options.getValue) {\n          options.getValue = function (element) {\n            return $(element).text();\n          };\n        }\n\n        if (!options.list) {\n          options.list = {};\n        }\n\n        if (!options.list.sort) {\n          options.list.sort = {};\n        }\n\n        options.list.sort.method = function (a, b) {\n          a = options.getValue(a);\n          b = options.getValue(b);\n\n          if (a < b) {\n            return -1;\n          }\n\n          if (a > b) {\n            return 1;\n          }\n\n          return 0;\n        };\n\n        if (!options.list.match) {\n          options.list.match = {};\n        }\n\n        options.list.match.method = function (element, phrase) {\n          if (element.search(phrase) > -1) {\n            return true;\n          } else {\n            return false;\n          }\n        };\n      }\n\n      if (options.categories !== undefined && options.categories instanceof Array) {\n        var categories = [];\n\n        for (var i = 0, length = options.categories.length; i < length; i += 1) {\n          var category = options.categories[i];\n\n          for (var property in defaults.categories[0]) {\n            if (category[property] === undefined) {\n              category[property] = defaults.categories[0][property];\n            }\n          }\n\n          categories.push(category);\n        }\n\n        options.categories = categories;\n      }\n    }\n\n    function mergeOptions() {\n      defaults = mergeObjects(defaults, options);\n\n      function mergeObjects(source, target) {\n        var mergedObject = source || {};\n\n        for (var propertyName in source) {\n          if (target[propertyName] !== undefined && target[propertyName] !== null) {\n            if (_typeof(target[propertyName]) !== \"object\" || target[propertyName] instanceof Array) {\n              mergedObject[propertyName] = target[propertyName];\n            } else {\n              mergeObjects(source[propertyName], target[propertyName]);\n            }\n          }\n        }\n        /* If data is an object */\n\n\n        if (target.data !== undefined && target.data !== null && _typeof(target.data) === \"object\") {\n          mergedObject.data = target.data;\n        }\n\n        return mergedObject;\n      }\n    }\n\n    function processAfterMerge() {\n      if (defaults.url !== \"list-required\" && typeof defaults.url !== \"function\") {\n        var defaultUrl = defaults.url;\n\n        defaults.url = function () {\n          return defaultUrl;\n        };\n      }\n\n      if (defaults.ajaxSettings.url !== undefined && typeof defaults.ajaxSettings.url !== \"function\") {\n        var defaultUrl = defaults.ajaxSettings.url;\n\n        defaults.ajaxSettings.url = function () {\n          return defaultUrl;\n        };\n      }\n\n      if (typeof defaults.listLocation === \"string\") {\n        var defaultlistLocation = defaults.listLocation;\n\n        if (defaults.dataType.toUpperCase() === \"XML\") {\n          defaults.listLocation = function (data) {\n            return $(data).find(defaultlistLocation);\n          };\n        } else {\n          defaults.listLocation = function (data) {\n            return data[defaultlistLocation];\n          };\n        }\n      }\n\n      if (typeof defaults.getValue === \"string\") {\n        var defaultsGetValue = defaults.getValue;\n\n        defaults.getValue = function (element) {\n          return element[defaultsGetValue];\n        };\n      }\n\n      if (options.categories !== undefined) {\n        defaults.categoriesAssigned = true;\n      }\n    }\n\n    function addAjaxSettings() {\n      if (options.ajaxSettings !== undefined && _typeof(options.ajaxSettings) === \"object\") {\n        defaults.ajaxSettings = options.ajaxSettings;\n      } else {\n        defaults.ajaxSettings = {};\n      }\n    }\n\n    function isAssigned(name) {\n      if (defaults[name] !== undefined && defaults[name] !== null) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function printPropertiesThatDoesntExist(consol, optionsToCheck) {\n      checkPropertiesIfExist(defaults, optionsToCheck);\n\n      function checkPropertiesIfExist(source, target) {\n        for (var property in target) {\n          if (source[property] === undefined) {\n            consol.log(\"Property '\" + property + \"' does not exist in EasyAutocomplete options API.\");\n          }\n\n          if (_typeof(source[property]) === \"object\" && $.inArray(property, externalObjects) === -1) {\n            checkPropertiesIfExist(source[property], target[property]);\n          }\n        }\n      }\n    }\n  };\n\n  return scope;\n}(EasyAutocomplete || {});\n/*\r\n * EasyAutocomplete - Logger \r\n */\n\n\nvar EasyAutocomplete = function (scope) {\n  scope.Logger = function Logger() {\n    this.error = function (message) {\n      console.log(\"ERROR: \" + message);\n    };\n\n    this.warning = function (message) {\n      console.log(\"WARNING: \" + message);\n    };\n  };\n\n  return scope;\n}(EasyAutocomplete || {});\n/*\r\n * EasyAutocomplete - Constans\r\n */\n\n\nvar EasyAutocomplete = function (scope) {\n  scope.Constans = function Constans() {\n    var constants = {\n      CONTAINER_CLASS: \"easy-autocomplete-container\",\n      CONTAINER_ID: \"eac-container-\",\n      WRAPPER_CSS_CLASS: \"easy-autocomplete\"\n    };\n\n    this.getValue = function (propertyName) {\n      return constants[propertyName];\n    };\n  };\n\n  return scope;\n}(EasyAutocomplete || {});\n/*\r\n * EasyAutocomplete - ListBuilderService \r\n *\r\n * @author Łukasz Pawełczak \r\n *\r\n */\n\n\nvar EasyAutocomplete = function (scope) {\n  scope.ListBuilderService = function ListBuilderService(configuration, proccessResponseData) {\n    this.init = function (data) {\n      var listBuilder = [],\n          builder = {};\n      builder.data = configuration.get(\"listLocation\")(data);\n      builder.getValue = configuration.get(\"getValue\");\n      builder.maxListSize = configuration.get(\"list\").maxNumberOfElements;\n      listBuilder.push(builder);\n      return listBuilder;\n    };\n\n    this.updateCategories = function (listBuilder, data) {\n      if (configuration.get(\"categoriesAssigned\")) {\n        listBuilder = [];\n\n        for (var i = 0; i < configuration.get(\"categories\").length; i += 1) {\n          var builder = convertToListBuilder(configuration.get(\"categories\")[i], data);\n          listBuilder.push(builder);\n        }\n      }\n\n      return listBuilder;\n    };\n\n    this.convertXml = function (listBuilder) {\n      if (configuration.get(\"dataType\").toUpperCase() === \"XML\") {\n        for (var i = 0; i < listBuilder.length; i += 1) {\n          listBuilder[i].data = convertXmlToList(listBuilder[i]);\n        }\n      }\n\n      return listBuilder;\n    };\n\n    this.processData = function (listBuilder, inputPhrase) {\n      for (var i = 0, length = listBuilder.length; i < length; i += 1) {\n        listBuilder[i].data = proccessResponseData(configuration, listBuilder[i], inputPhrase);\n      }\n\n      return listBuilder;\n    };\n\n    this.checkIfDataExists = function (listBuilders) {\n      for (var i = 0, length = listBuilders.length; i < length; i += 1) {\n        if (listBuilders[i].data !== undefined && listBuilders[i].data instanceof Array) {\n          if (listBuilders[i].data.length > 0) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    function convertToListBuilder(category, data) {\n      var builder = {};\n\n      if (configuration.get(\"dataType\").toUpperCase() === \"XML\") {\n        builder = convertXmlToListBuilder();\n      } else {\n        builder = convertDataToListBuilder();\n      }\n\n      if (category.header !== undefined) {\n        builder.header = category.header;\n      }\n\n      if (category.maxNumberOfElements !== undefined) {\n        builder.maxNumberOfElements = category.maxNumberOfElements;\n      }\n\n      if (configuration.get(\"list\").maxNumberOfElements !== undefined) {\n        builder.maxListSize = configuration.get(\"list\").maxNumberOfElements;\n      }\n\n      if (category.getValue !== undefined) {\n        if (typeof category.getValue === \"string\") {\n          var defaultsGetValue = category.getValue;\n\n          builder.getValue = function (element) {\n            return element[defaultsGetValue];\n          };\n        } else if (typeof category.getValue === \"function\") {\n          builder.getValue = category.getValue;\n        }\n      } else {\n        builder.getValue = configuration.get(\"getValue\");\n      }\n\n      return builder;\n\n      function convertXmlToListBuilder() {\n        var builder = {},\n            listLocation;\n\n        if (category.xmlElementName !== undefined) {\n          builder.xmlElementName = category.xmlElementName;\n        }\n\n        if (category.listLocation !== undefined) {\n          listLocation = category.listLocation;\n        } else if (configuration.get(\"listLocation\") !== undefined) {\n          listLocation = configuration.get(\"listLocation\");\n        }\n\n        if (listLocation !== undefined) {\n          if (typeof listLocation === \"string\") {\n            builder.data = $(data).find(listLocation);\n          } else if (typeof listLocation === \"function\") {\n            builder.data = listLocation(data);\n          }\n        } else {\n          builder.data = data;\n        }\n\n        return builder;\n      }\n\n      function convertDataToListBuilder() {\n        var builder = {};\n\n        if (category.listLocation !== undefined) {\n          if (typeof category.listLocation === \"string\") {\n            builder.data = data[category.listLocation];\n          } else if (typeof category.listLocation === \"function\") {\n            builder.data = category.listLocation(data);\n          }\n        } else {\n          builder.data = data;\n        }\n\n        return builder;\n      }\n    }\n\n    function convertXmlToList(builder) {\n      var simpleList = [];\n\n      if (builder.xmlElementName === undefined) {\n        builder.xmlElementName = configuration.get(\"xmlElementName\");\n      }\n\n      $(builder.data).find(builder.xmlElementName).each(function () {\n        simpleList.push(this);\n      });\n      return simpleList;\n    }\n  };\n\n  return scope;\n}(EasyAutocomplete || {});\n/*\r\n * EasyAutocomplete - Data proccess module\r\n *\r\n * Process list to display:\r\n * - sort \r\n * - decrease number to specific number\r\n * - show only matching list\r\n *\r\n */\n\n\nvar EasyAutocomplete = function (scope) {\n  scope.proccess = function proccessData(config, listBuilder, phrase) {\n    scope.proccess.match = match;\n    var list = listBuilder.data,\n        inputPhrase = phrase; //TODO REFACTOR\n\n    list = findMatch(list, inputPhrase);\n    list = reduceElementsInList(list);\n    list = sort(list);\n    return list;\n\n    function findMatch(list, phrase) {\n      var preparedList = [],\n          value = \"\";\n\n      if (config.get(\"list\").match.enabled) {\n        for (var i = 0, length = list.length; i < length; i += 1) {\n          value = config.get(\"getValue\")(list[i]);\n\n          if (match(value, phrase)) {\n            preparedList.push(list[i]);\n          }\n        }\n      } else {\n        preparedList = list;\n      }\n\n      return preparedList;\n    }\n\n    function match(value, phrase) {\n      if (!config.get(\"list\").match.caseSensitive) {\n        if (typeof value === \"string\") {\n          value = value.toLowerCase();\n        }\n\n        phrase = phrase.toLowerCase();\n      }\n\n      if (config.get(\"list\").match.method(value, phrase)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function reduceElementsInList(list) {\n      if (listBuilder.maxNumberOfElements !== undefined && list.length > listBuilder.maxNumberOfElements) {\n        list = list.slice(0, listBuilder.maxNumberOfElements);\n      }\n\n      return list;\n    }\n\n    function sort(list) {\n      if (config.get(\"list\").sort.enabled) {\n        list.sort(config.get(\"list\").sort.method);\n      }\n\n      return list;\n    }\n  };\n\n  return scope;\n}(EasyAutocomplete || {});\n/*\r\n * EasyAutocomplete - Template \r\n *\r\n * \r\n *\r\n */\n\n\nvar EasyAutocomplete = function (scope) {\n  scope.Template = function Template(options) {\n    var genericTemplates = {\n      basic: {\n        type: \"basic\",\n        method: function method(element) {\n          return element;\n        },\n        cssClass: \"\"\n      },\n      description: {\n        type: \"description\",\n        fields: {\n          description: \"description\"\n        },\n        method: function method(element) {\n          return element + \" - description\";\n        },\n        cssClass: \"eac-description\"\n      },\n      iconLeft: {\n        type: \"iconLeft\",\n        fields: {\n          icon: \"\"\n        },\n        method: function method(element) {\n          return element;\n        },\n        cssClass: \"eac-icon-left\"\n      },\n      iconRight: {\n        type: \"iconRight\",\n        fields: {\n          iconSrc: \"\"\n        },\n        method: function method(element) {\n          return element;\n        },\n        cssClass: \"eac-icon-right\"\n      },\n      links: {\n        type: \"links\",\n        fields: {\n          link: \"\"\n        },\n        method: function method(element) {\n          return element;\n        },\n        cssClass: \"\"\n      },\n      custom: {\n        type: \"custom\",\n        method: function method() {},\n        cssClass: \"\"\n      }\n    },\n\n    /*\r\n     * Converts method with {{text}} to function\r\n     */\n    convertTemplateToMethod = function convertTemplateToMethod(template) {\n      var _fields = template.fields,\n          buildMethod;\n\n      if (template.type === \"description\") {\n        buildMethod = genericTemplates.description.method;\n\n        if (typeof _fields.description === \"string\") {\n          buildMethod = function buildMethod(elementValue, element) {\n            return elementValue + \" - <span>\" + element[_fields.description] + \"</span>\";\n          };\n        } else if (typeof _fields.description === \"function\") {\n          buildMethod = function buildMethod(elementValue, element) {\n            return elementValue + \" - <span>\" + _fields.description(element) + \"</span>\";\n          };\n        }\n\n        return buildMethod;\n      }\n\n      if (template.type === \"iconRight\") {\n        if (typeof _fields.iconSrc === \"string\") {\n          buildMethod = function buildMethod(elementValue, element) {\n            return elementValue + \"<img class='eac-icon' src='\" + element[_fields.iconSrc] + \"' />\";\n          };\n        } else if (typeof _fields.iconSrc === \"function\") {\n          buildMethod = function buildMethod(elementValue, element) {\n            return elementValue + \"<img class='eac-icon' src='\" + _fields.iconSrc(element) + \"' />\";\n          };\n        }\n\n        return buildMethod;\n      }\n\n      if (template.type === \"iconLeft\") {\n        if (typeof _fields.iconSrc === \"string\") {\n          buildMethod = function buildMethod(elementValue, element) {\n            return \"<img class='eac-icon' src='\" + element[_fields.iconSrc] + \"' />\" + elementValue;\n          };\n        } else if (typeof _fields.iconSrc === \"function\") {\n          buildMethod = function buildMethod(elementValue, element) {\n            return \"<img class='eac-icon' src='\" + _fields.iconSrc(element) + \"' />\" + elementValue;\n          };\n        }\n\n        return buildMethod;\n      }\n\n      if (template.type === \"links\") {\n        if (typeof _fields.link === \"string\") {\n          buildMethod = function buildMethod(elementValue, element) {\n            return \"<a href='\" + element[_fields.link] + \"' >\" + elementValue + \"</a>\";\n          };\n        } else if (typeof _fields.link === \"function\") {\n          buildMethod = function buildMethod(elementValue, element) {\n            return \"<a href='\" + _fields.link(element) + \"' >\" + elementValue + \"</a>\";\n          };\n        }\n\n        return buildMethod;\n      }\n\n      if (template.type === \"custom\") {\n        return template.method;\n      }\n\n      return genericTemplates.basic.method;\n    },\n        prepareBuildMethod = function prepareBuildMethod(options) {\n      if (!options || !options.type) {\n        return genericTemplates.basic.method;\n      }\n\n      if (options.type && genericTemplates[options.type]) {\n        return convertTemplateToMethod(options);\n      } else {\n        return genericTemplates.basic.method;\n      }\n    },\n        templateClass = function templateClass(options) {\n      var emptyStringFunction = function emptyStringFunction() {\n        return \"\";\n      };\n\n      if (!options || !options.type) {\n        return emptyStringFunction;\n      }\n\n      if (options.type && genericTemplates[options.type]) {\n        return function () {\n          var _cssClass = genericTemplates[options.type].cssClass;\n          return function () {\n            return _cssClass;\n          };\n        }();\n      } else {\n        return emptyStringFunction;\n      }\n    };\n\n    this.getTemplateClass = templateClass(options);\n    this.build = prepareBuildMethod(options);\n  };\n\n  return scope;\n}(EasyAutocomplete || {});\n/*\r\n * EasyAutocomplete - jQuery plugin for autocompletion\r\n *\r\n */\n\n\nvar EasyAutocomplete = function (scope) {\n  scope.main = function Core($input, options) {\n    var module = {\n      name: \"EasyAutocomplete\",\n      shortcut: \"eac\"\n    };\n    var consts = new scope.Constans(),\n        config = new scope.Configuration(options),\n        logger = new scope.Logger(),\n        template = new scope.Template(options.template),\n        listBuilderService = new scope.ListBuilderService(config, scope.proccess),\n        checkParam = config.equals,\n        $field = $input,\n        $container = \"\",\n        elementsList = [],\n        selectedElement = -1,\n        requestDelayTimeoutId;\n    scope.consts = consts;\n\n    this.getConstants = function () {\n      return consts;\n    };\n\n    this.getConfiguration = function () {\n      return config;\n    };\n\n    this.getContainer = function () {\n      return $container;\n    };\n\n    this.getSelectedItemIndex = function () {\n      return selectedElement;\n    };\n\n    this.getItems = function () {\n      return elementsList;\n    };\n\n    this.getItemData = function (index) {\n      if (elementsList.length < index || elementsList[index] === undefined) {\n        return -1;\n      } else {\n        return elementsList[index];\n      }\n    };\n\n    this.getSelectedItemData = function () {\n      return this.getItemData(selectedElement);\n    };\n\n    this.build = function () {\n      prepareField();\n    };\n\n    this.init = function () {\n      init();\n    };\n\n    function init() {\n      if ($field.length === 0) {\n        logger.error(\"Input field doesn't exist.\");\n        return;\n      }\n\n      if (!config.checkDataUrlProperties()) {\n        logger.error(\"One of options variables 'data' or 'url' must be defined.\");\n        return;\n      }\n\n      if (!config.checkRequiredProperties()) {\n        logger.error(\"Will not work without mentioned properties.\");\n        return;\n      }\n\n      prepareField();\n      bindEvents();\n    }\n\n    function prepareField() {\n      if ($field.parent().hasClass(consts.getValue(\"WRAPPER_CSS_CLASS\"))) {\n        removeContainer();\n        removeWrapper();\n      }\n\n      createWrapper();\n      createContainer();\n      $container = $(\"#\" + getContainerId());\n\n      if (config.get(\"placeholder\")) {\n        $field.attr(\"placeholder\", config.get(\"placeholder\"));\n      }\n\n      function createWrapper() {\n        var $wrapper = $(\"<div>\"),\n            classes = consts.getValue(\"WRAPPER_CSS_CLASS\");\n\n        if (config.get(\"theme\") && config.get(\"theme\") !== \"\") {\n          classes += \" eac-\" + config.get(\"theme\");\n        }\n\n        if (config.get(\"cssClasses\") && config.get(\"cssClasses\") !== \"\") {\n          classes += \" \" + config.get(\"cssClasses\");\n        }\n\n        if (template.getTemplateClass() !== \"\") {\n          classes += \" \" + template.getTemplateClass();\n        }\n\n        $wrapper.addClass(classes);\n        $field.wrap($wrapper);\n\n        if (config.get(\"adjustWidth\") === true) {\n          adjustWrapperWidth();\n        }\n      }\n\n      function adjustWrapperWidth() {\n        var fieldWidth = $field.outerWidth();\n        $field.parent().css(\"width\", fieldWidth);\n      }\n\n      function removeWrapper() {\n        $field.unwrap();\n      }\n\n      function createContainer() {\n        var $elements_container = $(\"<div>\").addClass(consts.getValue(\"CONTAINER_CLASS\"));\n        $elements_container.attr(\"id\", getContainerId()).prepend($(\"<ul>\"));\n\n        (function () {\n          $elements_container\n          /* List show animation */\n          .on(\"show.eac\", function () {\n            switch (config.get(\"list\").showAnimation.type) {\n              case \"slide\":\n                var animationTime = config.get(\"list\").showAnimation.time,\n                    callback = config.get(\"list\").showAnimation.callback;\n                $elements_container.find(\"ul\").slideDown(animationTime, callback);\n                break;\n\n              case \"fade\":\n                var animationTime = config.get(\"list\").showAnimation.time,\n                    callback = config.get(\"list\").showAnimation.callback;\n                $elements_container.find(\"ul\").fadeIn(animationTime), callback;\n                break;\n\n              default:\n                $elements_container.find(\"ul\").show();\n                break;\n            }\n\n            config.get(\"list\").onShowListEvent();\n          })\n          /* List hide animation */\n          .on(\"hide.eac\", function () {\n            switch (config.get(\"list\").hideAnimation.type) {\n              case \"slide\":\n                var animationTime = config.get(\"list\").hideAnimation.time,\n                    callback = config.get(\"list\").hideAnimation.callback;\n                $elements_container.find(\"ul\").slideUp(animationTime, callback);\n                break;\n\n              case \"fade\":\n                var animationTime = config.get(\"list\").hideAnimation.time,\n                    callback = config.get(\"list\").hideAnimation.callback;\n                $elements_container.find(\"ul\").fadeOut(animationTime, callback);\n                break;\n\n              default:\n                $elements_container.find(\"ul\").hide();\n                break;\n            }\n\n            config.get(\"list\").onHideListEvent();\n          }).on(\"selectElement.eac\", function () {\n            $elements_container.find(\"ul li\").removeClass(\"selected\");\n            $elements_container.find(\"ul li\").eq(selectedElement).addClass(\"selected\");\n            config.get(\"list\").onSelectItemEvent();\n          }).on(\"loadElements.eac\", function (event, listBuilders, phrase) {\n            var $item = \"\",\n                $listContainer = $elements_container.find(\"ul\");\n            $listContainer.empty().detach();\n            elementsList = [];\n            var counter = 0;\n\n            for (var builderIndex = 0, listBuildersLength = listBuilders.length; builderIndex < listBuildersLength; builderIndex += 1) {\n              var listData = listBuilders[builderIndex].data;\n\n              if (listData.length === 0) {\n                continue;\n              }\n\n              if (listBuilders[builderIndex].header !== undefined && listBuilders[builderIndex].header.length > 0) {\n                $listContainer.append(\"<div class='eac-category' >\" + listBuilders[builderIndex].header + \"</div>\");\n              }\n\n              for (var i = 0, listDataLength = listData.length; i < listDataLength && counter < listBuilders[builderIndex].maxListSize; i += 1) {\n                $item = $(\"<li><div class='eac-item'></div></li>\");\n\n                (function () {\n                  var j = i,\n                      itemCounter = counter,\n                      elementsValue = listBuilders[builderIndex].getValue(listData[j]);\n                  $item.find(\" > div\").on(\"click\", function () {\n                    $field.val(elementsValue).trigger(\"change\");\n                    selectedElement = itemCounter;\n                    selectElement(itemCounter);\n                    config.get(\"list\").onClickEvent();\n                    config.get(\"list\").onChooseEvent();\n                  }).mouseover(function () {\n                    selectedElement = itemCounter;\n                    selectElement(itemCounter);\n                    config.get(\"list\").onMouseOverEvent();\n                  }).mouseout(function () {\n                    config.get(\"list\").onMouseOutEvent();\n                  }).html(template.build(highlight(elementsValue, phrase), listData[j]));\n                })();\n\n                $listContainer.append($item);\n                elementsList.push(listData[i]);\n                counter += 1;\n              }\n            }\n\n            $elements_container.append($listContainer);\n            config.get(\"list\").onLoadEvent();\n          });\n        })();\n\n        $field.after($elements_container);\n      }\n\n      function removeContainer() {\n        $field.next(\".\" + consts.getValue(\"CONTAINER_CLASS\")).remove();\n      }\n\n      function highlight(string, phrase) {\n        if (config.get(\"highlightPhrase\") && phrase !== \"\") {\n          return highlightPhrase(string, phrase);\n        } else {\n          return string;\n        }\n      }\n\n      function escapeRegExp(str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n      }\n\n      function highlightPhrase(string, phrase) {\n        var escapedPhrase = escapeRegExp(phrase);\n        return (string + \"\").replace(new RegExp(\"(\" + escapedPhrase + \")\", \"gi\"), \"<b>$1</b>\");\n      }\n    }\n\n    function getContainerId() {\n      var elementId = $field.attr(\"id\");\n      elementId = consts.getValue(\"CONTAINER_ID\") + elementId;\n      return elementId;\n    }\n\n    function bindEvents() {\n      bindAllEvents();\n\n      function bindAllEvents() {\n        if (checkParam(\"autocompleteOff\", true)) {\n          removeAutocomplete();\n        }\n\n        bindFocusOut();\n        bindKeyup();\n        bindKeydown();\n        bindKeypress();\n        bindFocus();\n        bindBlur();\n      }\n\n      function bindFocusOut() {\n        $field.focusout(function () {\n          var fieldValue = $field.val(),\n              phrase;\n\n          if (!config.get(\"list\").match.caseSensitive) {\n            fieldValue = fieldValue.toLowerCase();\n          }\n\n          for (var i = 0, length = elementsList.length; i < length; i += 1) {\n            phrase = config.get(\"getValue\")(elementsList[i]);\n\n            if (!config.get(\"list\").match.caseSensitive) {\n              phrase = phrase.toLowerCase();\n            }\n\n            if (phrase === fieldValue) {\n              selectedElement = i;\n              selectElement(selectedElement);\n              return;\n            }\n          }\n        });\n      }\n\n      function bindKeyup() {\n        $field.off(\"keyup\").keyup(function (event) {\n          switch (event.keyCode) {\n            case 27:\n              hideContainer();\n              loseFieldFocus();\n              break;\n\n            case 38:\n              event.preventDefault();\n\n              if (elementsList.length > 0 && selectedElement > 0) {\n                selectedElement -= 1;\n                $field.val(config.get(\"getValue\")(elementsList[selectedElement]));\n                selectElement(selectedElement);\n              }\n\n              break;\n\n            case 40:\n              event.preventDefault();\n\n              if (elementsList.length > 0 && selectedElement < elementsList.length - 1) {\n                selectedElement += 1;\n                $field.val(config.get(\"getValue\")(elementsList[selectedElement]));\n                selectElement(selectedElement);\n              }\n\n              break;\n\n            default:\n              if (event.keyCode > 40 || event.keyCode === 8) {\n                var inputPhrase = $field.val();\n\n                if (!(config.get(\"list\").hideOnEmptyPhrase === true && event.keyCode === 8 && inputPhrase === \"\")) {\n                  if (config.get(\"requestDelay\") > 0) {\n                    if (requestDelayTimeoutId !== undefined) {\n                      clearTimeout(requestDelayTimeoutId);\n                    }\n\n                    requestDelayTimeoutId = setTimeout(function () {\n                      loadData(inputPhrase);\n                    }, config.get(\"requestDelay\"));\n                  } else {\n                    loadData(inputPhrase);\n                  }\n                } else {\n                  hideContainer();\n                }\n              }\n\n              break;\n          }\n\n          function loadData(inputPhrase) {\n            if (inputPhrase.length < config.get(\"minCharNumber\")) {\n              return;\n            }\n\n            if (config.get(\"data\") !== \"list-required\") {\n              var data = config.get(\"data\");\n              var listBuilders = listBuilderService.init(data);\n              listBuilders = listBuilderService.updateCategories(listBuilders, data);\n              listBuilders = listBuilderService.processData(listBuilders, inputPhrase);\n              loadElements(listBuilders, inputPhrase);\n\n              if ($field.parent().find(\"li\").length > 0) {\n                showContainer();\n              } else {\n                hideContainer();\n              }\n            }\n\n            var settings = createAjaxSettings();\n\n            if (settings.url === undefined || settings.url === \"\") {\n              settings.url = config.get(\"url\");\n            }\n\n            if (settings.dataType === undefined || settings.dataType === \"\") {\n              settings.dataType = config.get(\"dataType\");\n            }\n\n            if (settings.url !== undefined && settings.url !== \"list-required\") {\n              settings.url = settings.url(inputPhrase);\n              settings.data = config.get(\"preparePostData\")(settings.data, inputPhrase);\n              $.ajax(settings).done(function (data) {\n                var listBuilders = listBuilderService.init(data);\n                listBuilders = listBuilderService.updateCategories(listBuilders, data);\n                listBuilders = listBuilderService.convertXml(listBuilders);\n\n                if (checkInputPhraseMatchResponse(inputPhrase, data)) {\n                  listBuilders = listBuilderService.processData(listBuilders, inputPhrase);\n                  loadElements(listBuilders, inputPhrase);\n                }\n\n                if (listBuilderService.checkIfDataExists(listBuilders) && $field.parent().find(\"li\").length > 0) {\n                  showContainer();\n                } else {\n                  hideContainer();\n                }\n\n                config.get(\"ajaxCallback\")();\n              }).fail(function () {\n                logger.warning(\"Fail to load response data\");\n              }).always(function () {});\n            }\n\n            function createAjaxSettings() {\n              var settings = {},\n                  ajaxSettings = config.get(\"ajaxSettings\") || {};\n\n              for (var set in ajaxSettings) {\n                settings[set] = ajaxSettings[set];\n              }\n\n              return settings;\n            }\n\n            function checkInputPhraseMatchResponse(inputPhrase, data) {\n              if (config.get(\"matchResponseProperty\") !== false) {\n                if (typeof config.get(\"matchResponseProperty\") === \"string\") {\n                  return data[config.get(\"matchResponseProperty\")] === inputPhrase;\n                }\n\n                if (typeof config.get(\"matchResponseProperty\") === \"function\") {\n                  return config.get(\"matchResponseProperty\")(data) === inputPhrase;\n                }\n\n                return true;\n              } else {\n                return true;\n              }\n            }\n          }\n        });\n      }\n\n      function bindKeydown() {\n        $field.on(\"keydown\", function (evt) {\n          evt = evt || window.event;\n          var keyCode = evt.keyCode;\n\n          if (keyCode === 38) {\n            suppressKeypress = true;\n            return false;\n          }\n        }).keydown(function (event) {\n          if (event.keyCode === 13 && selectedElement > -1) {\n            $field.val(config.get(\"getValue\")(elementsList[selectedElement]));\n            config.get(\"list\").onKeyEnterEvent();\n            config.get(\"list\").onChooseEvent();\n            selectedElement = -1;\n            hideContainer();\n            event.preventDefault();\n          }\n        });\n      }\n\n      function bindKeypress() {\n        $field.off(\"keypress\");\n      }\n\n      function bindFocus() {\n        $field.focus(function () {\n          if ($field.val() !== \"\" && elementsList.length > 0) {\n            selectedElement = -1;\n            showContainer();\n          }\n        });\n      }\n\n      function bindBlur() {\n        $field.blur(function () {\n          setTimeout(function () {\n            selectedElement = -1;\n            hideContainer();\n          }, 250);\n        });\n      }\n\n      function removeAutocomplete() {\n        $field.attr(\"autocomplete\", \"off\");\n      }\n    }\n\n    function showContainer() {\n      $container.trigger(\"show.eac\");\n    }\n\n    function hideContainer() {\n      $container.trigger(\"hide.eac\");\n    }\n\n    function selectElement(index) {\n      $container.trigger(\"selectElement.eac\", index);\n    }\n\n    function loadElements(list, phrase) {\n      $container.trigger(\"loadElements.eac\", [list, phrase]);\n    }\n\n    function loseFieldFocus() {\n      $field.trigger(\"blur\");\n    }\n  };\n\n  scope.eacHandles = [];\n\n  scope.getHandle = function (id) {\n    return scope.eacHandles[id];\n  };\n\n  scope.inputHasId = function (input) {\n    if ($(input).attr(\"id\") !== undefined && $(input).attr(\"id\").length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  scope.assignRandomId = function (input) {\n    var fieldId = \"\";\n\n    do {\n      fieldId = \"eac-\" + Math.floor(Math.random() * 10000);\n    } while ($(\"#\" + fieldId).length !== 0);\n\n    elementId = scope.consts.getValue(\"CONTAINER_ID\") + fieldId;\n    $(input).attr(\"id\", fieldId);\n  };\n\n  scope.setHandle = function (handle, id) {\n    scope.eacHandles[id] = handle;\n  };\n\n  return scope;\n}(EasyAutocomplete || {});\n\n(function ($) {\n  $.fn.easyAutocomplete = function (options) {\n    return this.each(function () {\n      var $this = $(this),\n          eacHandle = new EasyAutocomplete.main($this, options);\n\n      if (!EasyAutocomplete.inputHasId($this)) {\n        EasyAutocomplete.assignRandomId($this);\n      }\n\n      eacHandle.init();\n      EasyAutocomplete.setHandle(eacHandle, $this.attr(\"id\"));\n    });\n  };\n\n  $.fn.getSelectedItemIndex = function () {\n    var inputId = $(this).attr(\"id\");\n\n    if (inputId !== undefined) {\n      return EasyAutocomplete.getHandle(inputId).getSelectedItemIndex();\n    }\n\n    return -1;\n  };\n\n  $.fn.getItems = function () {\n    var inputId = $(this).attr(\"id\");\n\n    if (inputId !== undefined) {\n      return EasyAutocomplete.getHandle(inputId).getItems();\n    }\n\n    return -1;\n  };\n\n  $.fn.getItemData = function (index) {\n    var inputId = $(this).attr(\"id\");\n\n    if (inputId !== undefined && index > -1) {\n      return EasyAutocomplete.getHandle(inputId).getItemData(index);\n    }\n\n    return -1;\n  };\n\n  $.fn.getSelectedItemData = function () {\n    var inputId = $(this).attr(\"id\");\n\n    if (inputId !== undefined) {\n      return EasyAutocomplete.getHandle(inputId).getSelectedItemData();\n    }\n\n    return -1;\n  };\n})(jQuery);","map":null,"metadata":{},"sourceType":"module"}